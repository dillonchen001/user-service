// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"user-service/internal/data/ent/authprovider"
	"user-service/internal/data/ent/predicate"
	"user-service/internal/data/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthProviderUpdate is the builder for updating AuthProvider entities.
type AuthProviderUpdate struct {
	config
	hooks    []Hook
	mutation *AuthProviderMutation
}

// Where appends a list predicates to the AuthProviderUpdate builder.
func (_u *AuthProviderUpdate) Where(ps ...predicate.AuthProvider) *AuthProviderUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *AuthProviderUpdate) SetUserID(v int64) *AuthProviderUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *AuthProviderUpdate) SetNillableUserID(v *int64) *AuthProviderUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetProviderType sets the "provider_type" field.
func (_u *AuthProviderUpdate) SetProviderType(v string) *AuthProviderUpdate {
	_u.mutation.SetProviderType(v)
	return _u
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (_u *AuthProviderUpdate) SetNillableProviderType(v *string) *AuthProviderUpdate {
	if v != nil {
		_u.SetProviderType(*v)
	}
	return _u
}

// SetProviderID sets the "provider_id" field.
func (_u *AuthProviderUpdate) SetProviderID(v string) *AuthProviderUpdate {
	_u.mutation.SetProviderID(v)
	return _u
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_u *AuthProviderUpdate) SetNillableProviderID(v *string) *AuthProviderUpdate {
	if v != nil {
		_u.SetProviderID(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *AuthProviderUpdate) SetCreatedAt(v time.Time) *AuthProviderUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *AuthProviderUpdate) SetNillableCreatedAt(v *time.Time) *AuthProviderUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *AuthProviderUpdate) SetUser(v *User) *AuthProviderUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the AuthProviderMutation object of the builder.
func (_u *AuthProviderUpdate) Mutation() *AuthProviderMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *AuthProviderUpdate) ClearUser() *AuthProviderUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AuthProviderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuthProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AuthProviderUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuthProviderUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AuthProviderUpdate) check() error {
	if v, ok := _u.mutation.ProviderType(); ok {
		if err := authprovider.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "AuthProvider.provider_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderID(); ok {
		if err := authprovider.ProviderIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`ent: validator failed for field "AuthProvider.provider_id": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AuthProvider.user"`)
	}
	return nil
}

func (_u *AuthProviderUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authprovider.Table, authprovider.Columns, sqlgraph.NewFieldSpec(authprovider.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ProviderType(); ok {
		_spec.SetField(authprovider.FieldProviderType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProviderID(); ok {
		_spec.SetField(authprovider.FieldProviderID, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(authprovider.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authprovider.UserTable,
			Columns: []string{authprovider.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authprovider.UserTable,
			Columns: []string{authprovider.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AuthProviderUpdateOne is the builder for updating a single AuthProvider entity.
type AuthProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthProviderMutation
}

// SetUserID sets the "user_id" field.
func (_u *AuthProviderUpdateOne) SetUserID(v int64) *AuthProviderUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *AuthProviderUpdateOne) SetNillableUserID(v *int64) *AuthProviderUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetProviderType sets the "provider_type" field.
func (_u *AuthProviderUpdateOne) SetProviderType(v string) *AuthProviderUpdateOne {
	_u.mutation.SetProviderType(v)
	return _u
}

// SetNillableProviderType sets the "provider_type" field if the given value is not nil.
func (_u *AuthProviderUpdateOne) SetNillableProviderType(v *string) *AuthProviderUpdateOne {
	if v != nil {
		_u.SetProviderType(*v)
	}
	return _u
}

// SetProviderID sets the "provider_id" field.
func (_u *AuthProviderUpdateOne) SetProviderID(v string) *AuthProviderUpdateOne {
	_u.mutation.SetProviderID(v)
	return _u
}

// SetNillableProviderID sets the "provider_id" field if the given value is not nil.
func (_u *AuthProviderUpdateOne) SetNillableProviderID(v *string) *AuthProviderUpdateOne {
	if v != nil {
		_u.SetProviderID(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *AuthProviderUpdateOne) SetCreatedAt(v time.Time) *AuthProviderUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *AuthProviderUpdateOne) SetNillableCreatedAt(v *time.Time) *AuthProviderUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *AuthProviderUpdateOne) SetUser(v *User) *AuthProviderUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the AuthProviderMutation object of the builder.
func (_u *AuthProviderUpdateOne) Mutation() *AuthProviderMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *AuthProviderUpdateOne) ClearUser() *AuthProviderUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the AuthProviderUpdate builder.
func (_u *AuthProviderUpdateOne) Where(ps ...predicate.AuthProvider) *AuthProviderUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AuthProviderUpdateOne) Select(field string, fields ...string) *AuthProviderUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AuthProvider entity.
func (_u *AuthProviderUpdateOne) Save(ctx context.Context) (*AuthProvider, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuthProviderUpdateOne) SaveX(ctx context.Context) *AuthProvider {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AuthProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuthProviderUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AuthProviderUpdateOne) check() error {
	if v, ok := _u.mutation.ProviderType(); ok {
		if err := authprovider.ProviderTypeValidator(v); err != nil {
			return &ValidationError{Name: "provider_type", err: fmt.Errorf(`ent: validator failed for field "AuthProvider.provider_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderID(); ok {
		if err := authprovider.ProviderIDValidator(v); err != nil {
			return &ValidationError{Name: "provider_id", err: fmt.Errorf(`ent: validator failed for field "AuthProvider.provider_id": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AuthProvider.user"`)
	}
	return nil
}

func (_u *AuthProviderUpdateOne) sqlSave(ctx context.Context) (_node *AuthProvider, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authprovider.Table, authprovider.Columns, sqlgraph.NewFieldSpec(authprovider.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authprovider.FieldID)
		for _, f := range fields {
			if !authprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ProviderType(); ok {
		_spec.SetField(authprovider.FieldProviderType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProviderID(); ok {
		_spec.SetField(authprovider.FieldProviderID, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(authprovider.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authprovider.UserTable,
			Columns: []string{authprovider.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authprovider.UserTable,
			Columns: []string{authprovider.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthProvider{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
