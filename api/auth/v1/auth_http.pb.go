// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: auth/v1/auth.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthServiceLoginWithApple = "/auth.v1.AuthService/LoginWithApple"
const OperationAuthServiceLoginWithFacebook = "/auth.v1.AuthService/LoginWithFacebook"
const OperationAuthServiceLoginWithGoogle = "/auth.v1.AuthService/LoginWithGoogle"
const OperationAuthServiceLoginWithPhone = "/auth.v1.AuthService/LoginWithPhone"
const OperationAuthServiceLoginWithSnapchat = "/auth.v1.AuthService/LoginWithSnapchat"

type AuthServiceHTTPServer interface {
	// LoginWithApple Apple登录
	LoginWithApple(context.Context, *LoginWithAppleRequest) (*LoginResponse, error)
	// LoginWithFacebook Facebook登录
	LoginWithFacebook(context.Context, *LoginWithFacebookRequest) (*LoginResponse, error)
	// LoginWithGoogle Google登录
	LoginWithGoogle(context.Context, *LoginWithGoogleRequest) (*LoginResponse, error)
	// LoginWithPhone 手机号登录
	LoginWithPhone(context.Context, *LoginWithPhoneRequest) (*LoginResponse, error)
	// LoginWithSnapchat Snapchat登录
	LoginWithSnapchat(context.Context, *LoginWithSnapchatRequest) (*LoginResponse, error)
}

func RegisterAuthServiceHTTPServer(s *http.Server, srv AuthServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/user/v1/login_with_phone", _AuthService_LoginWithPhone0_HTTP_Handler(srv))
	r.POST("/user/v1/login_with_facebook", _AuthService_LoginWithFacebook0_HTTP_Handler(srv))
	r.POST("/user/v1/login_with_apple", _AuthService_LoginWithApple0_HTTP_Handler(srv))
	r.POST("/user/v1/login_with_google", _AuthService_LoginWithGoogle0_HTTP_Handler(srv))
	r.POST("/user/v1/login_with_snapchat", _AuthService_LoginWithSnapchat0_HTTP_Handler(srv))
}

func _AuthService_LoginWithPhone0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginWithPhoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceLoginWithPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginWithPhone(ctx, req.(*LoginWithPhoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_LoginWithFacebook0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginWithFacebookRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceLoginWithFacebook)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginWithFacebook(ctx, req.(*LoginWithFacebookRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_LoginWithApple0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginWithAppleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceLoginWithApple)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginWithApple(ctx, req.(*LoginWithAppleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_LoginWithGoogle0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginWithGoogleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceLoginWithGoogle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginWithGoogle(ctx, req.(*LoginWithGoogleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthService_LoginWithSnapchat0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginWithSnapchatRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthServiceLoginWithSnapchat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginWithSnapchat(ctx, req.(*LoginWithSnapchatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

type AuthServiceHTTPClient interface {
	LoginWithApple(ctx context.Context, req *LoginWithAppleRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	LoginWithFacebook(ctx context.Context, req *LoginWithFacebookRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	LoginWithGoogle(ctx context.Context, req *LoginWithGoogleRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	LoginWithPhone(ctx context.Context, req *LoginWithPhoneRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	LoginWithSnapchat(ctx context.Context, req *LoginWithSnapchatRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
}

type AuthServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthServiceHTTPClient(client *http.Client) AuthServiceHTTPClient {
	return &AuthServiceHTTPClientImpl{client}
}

func (c *AuthServiceHTTPClientImpl) LoginWithApple(ctx context.Context, in *LoginWithAppleRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/user/v1/login_with_apple"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceLoginWithApple))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) LoginWithFacebook(ctx context.Context, in *LoginWithFacebookRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/user/v1/login_with_facebook"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceLoginWithFacebook))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) LoginWithGoogle(ctx context.Context, in *LoginWithGoogleRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/user/v1/login_with_google"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceLoginWithGoogle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) LoginWithPhone(ctx context.Context, in *LoginWithPhoneRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/user/v1/login_with_phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceLoginWithPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuthServiceHTTPClientImpl) LoginWithSnapchat(ctx context.Context, in *LoginWithSnapchatRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/user/v1/login_with_snapchat"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthServiceLoginWithSnapchat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
